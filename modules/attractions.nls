globals [   

]  

breed [attractions attraction]
breed [entrances entrance]

attractions-own [
  attraction-type ; "ride" or "activity". Determines the type of attraction, affecting how visitors interact with it.
  popularity ; A numeric value indicating its popularity. Higher values may influence visitor preferences or queue lengths.
  ride-length ; How long a ride takes.
  waiting-count ; Number of visitors currently waiting in the queue for this attraction.
  queue ; List of visitors waiting for this attraction. Used to manage the order and number of visitors.
  attraction-name ; The name of the attraction. Used for identification and possibly displayed in the simulation interface.
  attraction-popularity ; A boolean indicating if the attraction is considered popular (true) or not (false).
  visited ; A flag (usually true/false) indicating whether an attraction has been visited by a visitor.
  predecessor ; Refers to the previous attraction visited by a visitor.
  ride-capacity ; A list of visitors currently on the ride or participating in the activity. Indicates how many visitors are being served.
  ride-time ; The remaining time for the current ride or activity session to complete. A countdown to when the next group can be served.
  capacity ; The maximum number of visitors that can be accommodated by the attraction at one time. Influences how many visitors can be moved from the queue to the ride-capacity list.
  express-queue ; list of visitors in express-queue 
  express-waiting-count ; length of express-queue
  virtual-queue ; list of visitors in virtual-queue 
  virtual-waiting-count ; length of virtual-queue
]

entrances-own [
  name
  visited
  predecessor
]

to attraction-create-entrance
  create-entrances 1[
    set name "Entrance"
    setxy 0 -28
    set shape "house"
    set color brown
    set size 4
    set label (word "\n" name)
    set label-color white
    set visited false
    set predecessor nobody
  ]
end

to attraction-create-rides
  let random-ride-time random 3
  let rides ["Thunderbolt" "Carousel" "Aqua" "Skyward" "Flight" "Glide" "Dash" "Voyage" "Tunnel"]
  let positions [[-20 -3 true 10 10] [-20 20 true 10 10] [20 -3 true 7 8] [20 20 true 5 8] [-20 25 false 5 5]
  [0 20 false 5 8] [0 25 false 4 8] [-28 10 false 5 10] [20 10 false 4 10]]

  (foreach rides positions [
    [r p] ->
    let x item 0 p
    let y item 1 p
    
    ; Create a ride turtle at position (x, y)
    create-attractions 1 [
      set attraction-name r
      setxy x y
      set size 3
      set shape "square"
      set color green
      set label (word "\n" r)
      set label-color white
      set ride-length item 3 p
      set waiting-count 0
      set queue [] ; Initialize the queue as an empty list
      set ride-capacity [] ; 
      set ride-time -1
      set capacity item 4 p
      set attraction-popularity item 2 p
      set visited false
      set predecessor nobody
      set express-queue [] ; 
      set virtual-queue [] ; 
    ]
  ])
  
  

end

; Procedure to create activities
to attraction-create-activities
  let activities ["Enchanted" "Hunt" "Wizard" "Observatory" "Robotics" "Carnival"]
  let positions [[28 20 5 5] [-28 20 8 10] [25 -10 5 8] [-20 5 4 8] [-28 -8 6 5] [0 15 5 8]]

  (foreach activities positions [
    [a p] ->
    let x item 0 p
    let y item 1 p
    
    ; Create an activity turtle at position (x, y)
    create-attractions 1 [
      set attraction-name a
      setxy x y
      set size 3
      set shape "triangle"
      set color yellow
      set ride-length item 2 p
      set waiting-count 0
      set queue [] ; Initialize the queue as an empty list
      set ride-capacity [] ; 
      set ride-time -1
      set capacity item 3 p
      ; Add newlines to position the label below the turtle and set the label color to white
      set label (word "\n" a)
      set label-color white
      set visited false
      set predecessor nobody
      set express-queue [] ; 
      set virtual-queue [] ; 
    ]
  ])
  
end


; Procedure to create links between rides and activities
to attraction-create-links

  ; Carousel links
  ask one-of turtles with [label = "\nCarousel"] [
    create-link-with one-of turtles with [label = "\nHunt"]
    create-link-with one-of turtles with [label = "\nFlight"]
    create-link-with one-of turtles with [label = "\nObservatory"]
    create-link-with one-of turtles with [label = "\nGlide"]
  ]

  ; Glide links
  ask one-of turtles with [label = "\nGlide"] [
    create-link-with one-of turtles with [label = "\nDash"]
    create-link-with one-of turtles with [label = "\nCarnival"]
    create-link-with one-of turtles with [label = "\nSkyward"]
  ]

  ; Skyward links
  ask one-of turtles with [label = "\nSkyward"] [
    create-link-with one-of turtles with [label = "\nEnchanted"]
    create-link-with one-of turtles with [label = "\nTunnel"]
  ]

  ; Tunnel links
  ask one-of turtles with [label = "\nTunnel"] [
    create-link-with one-of turtles with [label = "\nAqua"]
  ]

  ; Observatory links
  ask one-of turtles with [label = "\nObservatory"] [
    create-link-with one-of turtles with [label = "\nVoyage"]
    create-link-with one-of turtles with [label = "\nThunderbolt"]
  ]

  ; Tunnel links
  ask one-of turtles with [label = "\nThunderbolt"] [
    create-link-with one-of turtles with [label = "\nRobotics"]
    create-link-with one-of turtles with [label = "\nEntrance"]
  ]

  ; Aqua links
  ask one-of turtles with [label = "\nAqua"] [
    create-link-with one-of turtles with [label = "\nWizard"]
    create-link-with one-of turtles with [label = "\nEntrance"]
    create-link-with one-of turtles with [label = "\nThunderbolt"]
  ]
  

end

to update-queues
  
  ask attractions [
    if length queue > 0 or length express-queue > 0[
      ; Corrected to increment wait time for the last visitor in the queue
      ; Move visitors from queue to ride-capacity until full or queue is empty
      while [length ride-capacity < capacity and (not empty? queue or not empty? express-queue) and ride-time = -1] [
        let express-counter 0
        while [length ride-capacity < capacity and not empty? express-queue and express-counter <= 4] [
          let express-rider first express-queue
          set ride-capacity lput express-rider ride-capacity
          set express-queue but-first express-queue
          set express-counter express-counter + 1
        ]
        let queue-counter 0
        while [length ride-capacity < capacity and not empty? queue and queue-counter <= 1]
        [
          let rider first queue
          set ride-capacity lput rider ride-capacity
          set queue but-first queue
          ; Update the waiting count after removing from queue
          set waiting-count length queue
          set queue-counter queue-counter + 1
        ]
      ]
    ]
    
    if not empty? ride-capacity  [
      if ride-time = -1 [
        set ride-time ride-length ; Reset the ride time for the next cycle
      ]
      if ride-time > 0 [
        set ride-time ride-time - 1  ; Decrement the ride time
      ]
      if ride-time = 0 [
        ; Process visitors after the ride is over
        while [not empty? ride-capacity] [
          ask first ride-capacity [
            ; Reset visitor's state here
            set isWaiting false 
            set decision-made? false
          ]
          set ride-capacity but-first ride-capacity
        ]
        set ride-time -1 ; Reset the ride time for the next cycle
      ]
    ] 
  ]
end

to update-attraction-labels
  ask attractions [
    ; Initialize the label with the attraction name for all cases.
    let base-label attraction-name

    ; Always show the basic queue length
    let q-label (word "Q:" (length queue * 3)) 

    ; Initialize express and virtual queue labels as empty strings
    let e-label ""
    let v-label ""

    ; Conditionally add details to the label based on the queue-mode
    if queue-mode = "express" or queue-mode = "priority" [
      set e-label (word "|E:" (length express-queue * 3))
    ]
    if queue-mode = "priority" [
      set v-label (word "|V:" (length virtual-queue * 3))
    ]

    ; Combine the parts to form the final label
    set label (word "\n" base-label "\n" q-label e-label v-label)
  ]
end
