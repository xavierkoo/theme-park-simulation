globals [
  arrival-means ; list of mean values for visitor spawning based on tick count
  visitor-archetypes ; list of possible visitor archetypes
  archetype-crf ; rf table to determine each visitor's archetype
]

; ------------------------------------------------------------------------------------------------------------------
 
; Create the RF table for determining visitor archetype
to spawning-visitor-mix
  set arrival-means [6 8 9 8 7 7 7 6 6]
  set visitor-archetypes ["Ride Fanatic" "Ride Enthusiast" "Average Visitor" "Leisure Enjoyer" "Passive Sightseer"]
  let archetype-prob (list fanatic-prob enthu-prob average-prob leisure-prob passive-prob) ; Adjustable by sliders

  ; Normalize archetype-prob
  let total-archetype-prob reduce + archetype-prob
  if total-archetype-prob > 0 [
    set archetype-prob map [prob -> prob / total-archetype-prob] archetype-prob
  ]

  set archetype-crf []
  let s 0
  foreach archetype-prob [
    i ->
    set s s + i
    set archetype-crf lput s archetype-crf
  ]
end

; ------------------------------------------------------------------------------------------------------------------

; Function to randomly decide visitor archetype
to-report determine-archetype
  ; generate random float
  let r random-float 1
  ; find index of first item in CRF >= r
  let index 0
  foreach archetype-crf [
    i ->
    ifelse r <= i [
      report item index visitor-archetypes
    ] [
      set index index + 1
    ]
  ]
  ; if no CRF > r, report last item
  report last visitor-archetypes
end

; ------------------------------------------------------------------------------------------------------------------

; Create visitors with their properties
to spawning-visitors [number-of-visitors]
  create-visitors number-of-visitors [
    
    ; Assign standard visitor properties + location
    set shape "person"
    set size 0.8
    setxy 0 -28 ; default position
    set walking-speed 1
    set path []
    set isWaiting false
    set waitTime 0
    set decision-made? false
    set going-home? false
    set isMoving false
    set next-dest-name ""
    set go-home-counter 0
    set go-home-threshold 1
    set current-location one-of turtles with [label = "\nEntrance"]
    set priority-pass []
    
    set isExpress? false
    if queue-mode = "express"[
      ifelse random-float 1 < express-prob ; slider
      [ set isExpress? true ] 
      [ set isExpress? false ]
    ] 
    
    ; Assign visitor archetype + properties that are not affected by archetype
    set priority-pass-usage-limit priority-pass-limit
    set satisfaction-level 100 ; initial satisfaction level
    set archetype determine-archetype
    set visited-attractions [] ; initialise the list
    
    ; Assign visitor properties that are affected by archetype
    ifelse archetype = "Ride Fanatic" [
      ; Ride Fanatic
      set color violet
      set patience-level 24 + random 10 ; Ride Fanatics have high queue patience
      set expected-attractions-rate random 3 + 5 ; Ride Fanatics expect to visit more attractions
      set repeat-ride? one-of [true true true true] ; Ride Fanatics absolutely likely to repeat rides
      set attraction-pref 0.7 ; Ride Fanatics have a high preference for rides
      set decision-made? false
    ] [
      ifelse archetype = "Ride Enthusiast" [
        ; Ride Enthusiast
        set color red
        set patience-level 21 + random 10 ; Ride Enthusiasts have moderate queue patience
        set expected-attractions-rate random 3 + 4 ; Ride Enthusiasts expect to visit moderate attractions
        set repeat-ride? one-of [true true true false] ; Ride Enthusiasts likely to repeat rides
        set attraction-pref 0.6 ; Ride Enthusiasts have a slightly higher preference for rides
        set decision-made? false
      ] [
        ifelse archetype = "Average Visitor" [
          ; Average Visitor
          set color pink
          set patience-level 18 + random 10 ; Average Visitors have reasonable queue patience
          set expected-attractions-rate random 3 + 3 ; Average Visitors expect to visit fewer attractions
          set repeat-ride? one-of [true true false false] ; Average Visitors may or may not repeat rides
          set attraction-pref 0.5 ; Average Visitors have no preference
          set decision-made? false
        ] [
          ifelse archetype = "Leisure Enjoyer" [
            ; Leisure Enjoyer
            set color sky
            set patience-level 15 + random 10; Leisure Enjoyers have low queue patience
            set expected-attractions-rate random 3 + 2 ; Leisure Enjoyers expect to visit very few attractions
            set repeat-ride? one-of [true false false false] ; Leisure Enjoyers rarely repeat rides
            set attraction-pref 0.4 ; Leisure Enjoyers have a slightly higher preference for activities
            set decision-made? false
          ] [
            ifelse archetype = "Passive Sightseer" [
              ; Passive Sightseer
              set color cyan
              set patience-level 12 + random 10 ; Passive Sightseers have somewhat reasonable queue patience
              set expected-attractions-rate random 3 + 1 ; Passive Sightseers expect to visit few attractions
              set repeat-ride? one-of [false false false false] ; Passive Sightseers do not repeat rides
              set attraction-pref 0.3 ; Passive Sightseers have a high preference for activities
              set decision-made? false
            ] [
              ; null (follows Average Visitor)
              set color pink
              set patience-level 18 + random 10 ; Average Visitors have reasonable queue patience
              set expected-attractions-rate random 3 + 3 ; Average Visitors expect to visit fewer attractions
              set repeat-ride? one-of [true true false false] ; Average Visitors may or may not repeat rides
              set attraction-pref 0.5 ; Average Visitors have no preference
              set decision-made? false
            ]
          ]
        ]
      ]
    ]
  ]
end

; ------------------------------------------------------------------------------------------------------------------

; Determine number of visitors to spawn on current tick
to spawning-visitors-now
  if ticks < closing-time[
    let current-mean item (floor (ticks / 30)) arrival-means ; 30 ticks per hour
    let value random-poisson current-mean
    spawning-visitors (value / 3)
  ]
end